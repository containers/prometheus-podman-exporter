name: validate pull requests
on:
  pull_request:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.0

  DCO-check:
    runs-on: ubuntu-latest
    steps:
      - name: get pr commits
        id: 'get-pr-commits'
        uses: tim-actions/get-pr-commits@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: DCO check
        uses: tim-actions/dco@master
        with:
          commits: ${{ steps.get-pr-commits.outputs.commits }}

      - name: check subject line length
        uses: tim-actions/commit-message-checker-with-regex@v0.3.1
        with:
          commits: ${{ steps.get-pr-commits.outputs.commits }}
          pattern: '^.{0,72}(\n.*)*$'
          error: 'Subject too long (max 72)'

  codespell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          skip: ./.git,./vendor,*_test.go,go.sum,go.mod

  vendoring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.24.7'
      - uses: actions/checkout@v3
      - run: |
          go mod tidy
          go mod vendor
          go mod verify
          bash ./hack/tree_status.sh

  golangci-lint_fmt:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.24.7'
      - uses: actions/checkout@v3
      - run: |
          bash hack/install_dep.sh
          make .install.golangci-lint
          make lint
          make gofmt


  tests_podmanv5:
    runs-on: ubuntu-latest
    container:
      image: quay.io/containers/podman:v5
      volumes:
        - container_volume:/var/lib/containers
      options: "--device /dev/fuse:rw --security-opt label=disable --security-opt seccomp=unconfined --privileged"
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.24.7'
      - uses: actions/checkout@v3
      - run: |
          yum -y install make gcc glib2-devel glibc-devel glibc-static device-mapper-devel
          export GOBIN=$(pwd)/bin/
          export CGO_ENABLED=1
          make .install.ginkgo
          make test

  build_binary:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.24.7'
      - uses: actions/checkout@v3
      - run: |
          bash hack/install_dep.sh
          make binary

  goreportcard:
    name: update reportcard
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: creekorful/goreportcard-action@v1.0
